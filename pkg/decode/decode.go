package decode

import (
	"encoding/json"
	"net/http"
	"time"
)

func Decode(resp *http.Response) {
	defer resp.Body.Close()

	// response bodyを文字列で取得するサンプル
	//b, err := ioutil.ReadAll(resp.Body)
	//if err != nil {
	//	log.Fatal(err)
	//	return
	//}
	//println(string(b))

	var Autogenerated struct {
		Object  string `json:"object"`
		Results []struct {
			Object         string    `json:"object"`
			ID             string    `json:"id"`
			CreatedTime    time.Time `json:"created_time"`
			LastEditedTime time.Time `json:"last_edited_time"`
			HasChildren    bool      `json:"has_children"`
			Type           string    `json:"type"`
			Paragraph      struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
			} `json:"paragraph,omitempty"`
			ToDo struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
				Checked bool `json:"checked"`
			} `json:"to_do,omitempty"`
			BulletedListItem struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
			} `json:"bulleted_list_item,omitempty"`
			Toggle struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
			} `json:"toggle,omitempty"`
		} `json:"results"`
		NextCursor interface{} `json:"next_cursor"`
		HasMore    bool        `json:"has_more"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&Autogenerated); err != nil {
		panic(err)
	}
	for _, hit := range Autogenerated.Results {
		//println(hit.Type)
		switch hit.Type {
		case "paragraph":
			println("pa")
			for _, hit2 := range hit.Paragraph.Text {
				println(hit2.PlainText)
			}
		case "to_do":
			println("do")
			for _, hit2 := range hit.ToDo.Text {
				println(hit2.PlainText)
			}
		case "bulleted_list_item":
			println("bu")
			for _, hit2 := range hit.BulletedListItem.Text {
				println(hit2.PlainText)
			}
		case "toggle":
			println("to")
			for _, hit2 := range hit.Toggle.Text {
				println(hit2.PlainText)
			}
		default:
			println("default")
		}
	}
}
