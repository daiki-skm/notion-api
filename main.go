package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
)

const (
	baseURL       = "https://api.notion.com/v1"
	apiVersion    = "2021-05-13"
)

type Key struct {
	ClientSecret string
	BlockId string
}

func main()  {
	key := &Key{
		os.Getenv("NOTION_KEY"),
		os.Getenv("BLOCK_ID"),
	}
	client := &http.Client{}
	get(client, key)
}

func get(client *http.Client, key *Key) {
	req, err := http.NewRequest("GET", baseURL+"/blocks/"+key.BlockId+"/children", nil)
	if err != nil {
		log.Fatal(err)
		return
	}

	req.Header.Set("Authorization", fmt.Sprintf("Bearer %v", key.ClientSecret))
	req.Header.Set("Notion-Version", apiVersion)

	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
		return
	}

	defer resp.Body.Close()

	execute(resp)
}

func execute(resp *http.Response) {
	// response bodyを文字列で取得するサンプル
	//b, err := ioutil.ReadAll(resp.Body)
	//if err != nil {
	//	log.Fatal(err)
	//	return
	//}
	//println(string(b))

	var Autogenerated struct {
		Object  string `json:"object"`
		Results []struct {
			Object         string    `json:"object"`
			ID             string    `json:"id"`
			CreatedTime    time.Time `json:"created_time"`
			LastEditedTime time.Time `json:"last_edited_time"`
			HasChildren    bool      `json:"has_children"`
			Type           string    `json:"type"`
			Paragraph      struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
			} `json:"paragraph,omitempty"`
			ToDo struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
				Checked bool `json:"checked"`
			} `json:"to_do,omitempty"`
			BulletedListItem struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
			} `json:"bulleted_list_item,omitempty"`
			Toggle struct {
				Text []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"text"`
			} `json:"toggle,omitempty"`
		} `json:"results"`
		NextCursor interface{} `json:"next_cursor"`
		HasMore    bool        `json:"has_more"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&Autogenerated); err != nil {
		panic(err)
	}
	for _, hit := range Autogenerated.Results {
		println(hit.Type)
	}
}
